name: Release-It
on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    # Only run on push to main (not on PR merge)
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Check for releasable commits
        id: check-commits
        run: |
          if git log --oneline --grep='^feat\|^fix\|^perf\|^refactor' $(git describe --tags --abbrev=0 2>/dev/null || echo 'HEAD~10')..HEAD | head -1 | grep -q '.'; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Found releasable commits"
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No releasable commits found"
          fi

      - name: Create Release PR
        if: steps.check-commits.outputs.has-changes == 'true'
        run: |
          # Check if release PR already exists
          if gh pr list --label "automated-release" --state open | grep -q .; then
            echo "Release PR already exists, skipping creation"
            exit 0
          fi
          
          # Run Release-It to prepare release (commit only, no tag/push/release)
          npm run release -- --no-git.tag --no-git.push --no-github.release
          
          # Get the version from the commit Release-It just made
          NEXT_VERSION=$(node -p "require('./package.json').version")
          
          # Move the release commit to a new branch
          BRANCH_NAME="release/automated-$(date +%s)"
          
          # Create the branch from the current commit (which has the release changes)
          git branch "$BRANCH_NAME"
          
          # Reset main to before the release commit
          git reset --hard HEAD~1
          
          # Switch to the release branch and push it
          git checkout "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"
          
          # Create PR
          gh pr create \
            --title "üöÄ Release v${NEXT_VERSION}" \
            --label "automated-release" \
            --body "$(cat <<EOF
          ## Release v${NEXT_VERSION}
          
          This PR was automatically created by Release-It based on conventional commits.
          
          ### Changes Since Last Release
          $(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo 'HEAD~10')..origin/main | grep -E '^- (feat|fix|perf|refactor)')
          
          ### What This PR Does
          - Updates version to **${NEXT_VERSION}** (CalVer format)
          - Generates changelog based on conventional commits
          - Prepares all files for release
          
          ### Review Checklist
          - [ ] Verify version number is correct
          - [ ] Review CHANGELOG.md entries
          - [ ] Approve and merge to create release
          
          **‚ö†Ô∏è Merging this PR will:**
          1. Create GitHub release v${NEXT_VERSION}
          2. Create git tag v${NEXT_VERSION} 
          3. Trigger Docker image builds
          EOF
          )"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  perform-release:
    runs-on: ubuntu-latest
    # Only run when a release PR is merged
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'automated-release')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Perform Release
        run: npm run release:ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  # Note: Docker images are built by the existing release.yml workflow
  # which triggers on release:published events that Release-It creates