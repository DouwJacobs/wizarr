name: wizarr-ci

on:
    push:
        branches:
            - main
    pull_request: { }
    schedule:
        # nightly i18n refresh
        -   cron: '13 3 * * *'
    workflow_dispatch: { }

env:
    PYTHON_VERSION: '3.12'
    NODE_VERSION: '20'

jobs:
    # ──────────────────────── Babel / i18n ────────────────────────
    i18n:
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v4

            -   name: Install uv
                uses: astral-sh/setup-uv@v5

            -   name: "Set up Python"
                uses: actions/setup-python@v5
                with:
                    python-version-file: "pyproject.toml"

            -   name: Extract / update / compile messages
                run: |
                    uv run pybabel extract -F babel.cfg -k _l -o messages.pot .
                    uv run pybabel update  -i messages.pot -d app/translations
                    uv run    pybabel compile -d app/translations
            
            # Publish compiled .mo files for docker-dev
            -   uses: actions/upload-artifact@v4
                with:
                    name: translations
                    path: app/translations/**/*.mo
                    retention-days: 7
            
            # Optional PR with updated .po / .mo files
            -   name: Create i18n update PR
                if: github.ref == 'refs/heads/main'
                uses: peter-evans/create-pull-request@v6
                with:
                    commit-message: 'i18n: update PO & MO files'
                    branch: i18n-updates
                    title: 'Automatic i18n sync'
                    body: 'This PR updates translation templates and compiled files.'
        # ───────────────────── Dev Docker image ───────────────────────
    docker-dev:
        if: github.ref == 'refs/heads/main' && github.event_name != 'schedule'
        needs: [ i18n ]          # wait for both
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
        
        steps:
            -   uses: actions/checkout@v4
            
            # Bring artefacts into the repo tree
            -   uses: actions/download-artifact@v4
                with:
                    name: tailwind-css
                    path: app/static/css/

            -   uses: actions/download-artifact@v4
                with:
                    name: translations
                    path: app/translations/
            
            # Log in to GitHub Container Registry
            -   uses: docker/login-action@v3
                with:
                    registry: ghcr.io
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
            
            # Build and push the :dev image
            -   name: Build and push :dev image
                uses: docker/build-push-action@v5
                with:
                    context: .
                    push: true
                    tags: ghcr.io/${{ github.repository_owner }}/wizarr:dev
                    build-args: BUILD_ENV=development