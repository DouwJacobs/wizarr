name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check for releasable commits
        id: check-commits
        run: |
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            COMMITS=$(git log "${LAST_TAG}..HEAD" --oneline --grep="^feat\|^fix\|^perf\|^refactor" --grep="BREAKING CHANGE" || echo "")
          else
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --grep="BREAKING CHANGE" || echo "")
          fi
          
          if [[ -n "$COMMITS" ]]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Found releasable commits:"
            echo "$COMMITS"
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No releasable commits found"
          fi
          
      - name: Calculate Calendar Version
        id: calver
        if: steps.check-commits.outputs.has-changes == 'true'
        run: |
          YEAR=$(date +%Y)
          MONTH=$(date +%-m)  # No leading zero
          
          # Get current version from manifest
          CURRENT_VERSION=$(jq -r '."."' .release-please-manifest.json)
          
          # Extract current year, month, patch
          IFS='.' read -r CURRENT_YEAR CURRENT_MONTH CURRENT_PATCH <<< "$CURRENT_VERSION"
          
          # If same year and month, increment patch; otherwise reset to 0
          if [[ "$YEAR" == "$CURRENT_YEAR" && "$MONTH" == "$CURRENT_MONTH" ]]; then
            NEW_PATCH=$((CURRENT_PATCH + 1))
          else
            NEW_PATCH=0
          fi
          
          NEW_VERSION="$YEAR.$MONTH.$NEW_PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Generated calendar version: $NEW_VERSION"
          
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          release-as: ${{ steps.calver.outputs.version }}
          # Use personal access token to ensure Release Please PRs trigger other workflows
          token: ${{ secrets.RELEASE_PLEASE_TOKEN || secrets.GITHUB_TOKEN }}

  # Note: Docker images are built by the existing release.yml workflow
  # which triggers on release:published events that Release Please creates